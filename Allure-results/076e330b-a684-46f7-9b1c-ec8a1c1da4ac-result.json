{"name": "Page Title Test Case", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome=115.0.5790.171)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0118A813+48355]\n\t(No symbol) [0x0111C4B1]\n\t(No symbol) [0x01025358]\n\t(No symbol) [0x01021B33]\n\t(No symbol) [0x01018CA5]\n\t(No symbol) [0x01019D0A]\n\t(No symbol) [0x01019003]\n\t(No symbol) [0x01018355]\n\t(No symbol) [0x010182EC]\n\t(No symbol) [0x01016F26]\n\t(No symbol) [0x01017688]\n\t(No symbol) [0x01026B52]\n\t(No symbol) [0x0107CF01]\n\t(No symbol) [0x0106A73C]\n\t(No symbol) [0x0107C922]\n\t(No symbol) [0x0106A536]\n\t(No symbol) [0x010482DC]\n\t(No symbol) [0x010493DD]\n\tGetHandleVerifier [0x013EAABD+2539405]\n\tGetHandleVerifier [0x0142A78F+2800735]\n\tGetHandleVerifier [0x0142456C+2775612]\n\tGetHandleVerifier [0x012151E0+616112]\n\t(No symbol) [0x01125F8C]\n\t(No symbol) [0x01122328]\n\t(No symbol) [0x0112240B]\n\t(No symbol) [0x01114FF7]\n\tBaseThreadInitThunk [0x75DB6939+25]\n\tRtlGetFullPathName_UEx [0x77CD8FD2+1218]\n\tRtlGetFullPathName_UEx [0x77CD8F9D+1165]", "trace": "@pytest.fixture\n    def setup():\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n>       driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n\nconftest.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000157F2C89490>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...unk [0x75DB6939+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77CD8FD2+1218]\\\\n\\\\tRtlGetFullPathName_UEx [0x77CD8F9D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=115.0.5790.171)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0118A813+48355]\nE       \t(No symbol) [0x0111C4B1]\nE       \t(No symbol) [0x01025358]\nE       \t(No symbol) [0x01021B33]\nE       \t(No symbol) [0x01018CA5]\nE       \t(No symbol) [0x01019D0A]\nE       \t(No symbol) [0x01019003]\nE       \t(No symbol) [0x01018355]\nE       \t(No symbol) [0x010182EC]\nE       \t(No symbol) [0x01016F26]\nE       \t(No symbol) [0x01017688]\nE       \t(No symbol) [0x01026B52]\nE       \t(No symbol) [0x0107CF01]\nE       \t(No symbol) [0x0106A73C]\nE       \t(No symbol) [0x0107C922]\nE       \t(No symbol) [0x0106A536]\nE       \t(No symbol) [0x010482DC]\nE       \t(No symbol) [0x010493DD]\nE       \tGetHandleVerifier [0x013EAABD+2539405]\nE       \tGetHandleVerifier [0x0142A78F+2800735]\nE       \tGetHandleVerifier [0x0142456C+2775612]\nE       \tGetHandleVerifier [0x012151E0+616112]\nE       \t(No symbol) [0x01125F8C]\nE       \t(No symbol) [0x01122328]\nE       \t(No symbol) [0x0112240B]\nE       \t(No symbol) [0x01114FF7]\nE       \tBaseThreadInitThunk [0x75DB6939+25]\nE       \tRtlGetFullPathName_UEx [0x77CD8FD2+1218]\nE       \tRtlGetFullPathName_UEx [0x77CD8F9D+1165]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "log", "source": "0c4743ed-ccff-4f7e-8a53-821845a780f4-attachment.txt", "type": "text/plain"}], "start": 1691670477641, "stop": 1691670477641, "uuid": "f270fae7-47a4-4ab6-91ae-093a3c8e77cd", "historyId": "c73475caf37f7af625229b93d8fc3e8f", "testCaseId": "c73475caf37f7af625229b93d8fc3e8f", "fullName": "test_login.Test_Login#test_pagetitle", "labels": [{"name": "story", "value": "This is Story"}, {"name": "severity", "value": "normal"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_Login"}, {"name": "host", "value": "Dreamer"}, {"name": "thread", "value": "58944-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}], "links": [{"type": "link", "url": "https://opensource-demo.orangehrmlive.com/", "name": "https://opensource-demo.orangehrmlive.com/"}]}